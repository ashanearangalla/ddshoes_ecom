// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ddApp.DAL;

#nullable disable

namespace ddApp.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ddApp.Models.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ddApp.Models.MainStock", b =>
                {
                    b.Property<int>("MainStockID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MainStockID"));

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Sold")
                        .HasColumnType("int");

                    b.HasKey("MainStockID");

                    b.HasIndex("ProductID");

                    b.ToTable("MainStocks");
                });

            modelBuilder.Entity("ddApp.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ddApp.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemID"));

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasPrecision(18, 2)
                        .HasColumnType("int");

                    b.HasKey("OrderItemID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("ddApp.Models.Outlet", b =>
                {
                    b.Property<int>("OutletID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OutletID"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutletName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("OutletID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Outlets");
                });

            modelBuilder.Entity("ddApp.Models.Partner", b =>
                {
                    b.Property<int>("PartnerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PartnerID"));

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartnerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("PartnerID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("ddApp.Models.PreOrder", b =>
                {
                    b.Property<int>("PreOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PreOrderID"));

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<bool>("IsFulfilled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PreOrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasPrecision(18, 2)
                        .HasColumnType("int");

                    b.HasKey("PreOrderID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("ProductID");

                    b.ToTable("PreOrders");
                });

            modelBuilder.Entity("ddApp.Models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ddApp.Models.Sale", b =>
                {
                    b.Property<int>("SaleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaleID"));

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubStockID")
                        .HasColumnType("int");

                    b.HasKey("SaleID");

                    b.HasIndex("SubStockID");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("ddApp.Models.SubStock", b =>
                {
                    b.Property<int>("SubStockID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubStockID"));

                    b.Property<int?>("OutletID")
                        .HasColumnType("int");

                    b.Property<int?>("PartnerID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Sold")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("SubStockID");

                    b.HasIndex("OutletID");

                    b.HasIndex("PartnerID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserID");

                    b.ToTable("SubStocks");
                });

            modelBuilder.Entity("ddApp.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ddApp.Models.MainStock", b =>
                {
                    b.HasOne("ddApp.Models.Product", "Product")
                        .WithMany("MainStocks")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ddApp.Models.Order", b =>
                {
                    b.HasOne("ddApp.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID");

                    b.HasOne("ddApp.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID");

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ddApp.Models.OrderItem", b =>
                {
                    b.HasOne("ddApp.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ddApp.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ddApp.Models.Outlet", b =>
                {
                    b.HasOne("ddApp.Models.User", "User")
                        .WithOne("Outlet")
                        .HasForeignKey("ddApp.Models.Outlet", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ddApp.Models.Partner", b =>
                {
                    b.HasOne("ddApp.Models.User", "User")
                        .WithOne("Partner")
                        .HasForeignKey("ddApp.Models.Partner", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ddApp.Models.PreOrder", b =>
                {
                    b.HasOne("ddApp.Models.Customer", "Customer")
                        .WithMany("PreOrders")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ddApp.Models.Product", "Product")
                        .WithMany("PreOrders")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ddApp.Models.Sale", b =>
                {
                    b.HasOne("ddApp.Models.SubStock", "SubStock")
                        .WithMany("Sales")
                        .HasForeignKey("SubStockID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubStock");
                });

            modelBuilder.Entity("ddApp.Models.SubStock", b =>
                {
                    b.HasOne("ddApp.Models.Outlet", null)
                        .WithMany("StockDetails")
                        .HasForeignKey("OutletID");

                    b.HasOne("ddApp.Models.Partner", null)
                        .WithMany("StockDetails")
                        .HasForeignKey("PartnerID");

                    b.HasOne("ddApp.Models.Product", "Product")
                        .WithMany("SubStocks")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ddApp.Models.User", "User")
                        .WithMany("SubStocks")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ddApp.Models.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("PreOrders");
                });

            modelBuilder.Entity("ddApp.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ddApp.Models.Outlet", b =>
                {
                    b.Navigation("StockDetails");
                });

            modelBuilder.Entity("ddApp.Models.Partner", b =>
                {
                    b.Navigation("StockDetails");
                });

            modelBuilder.Entity("ddApp.Models.Product", b =>
                {
                    b.Navigation("MainStocks");

                    b.Navigation("OrderItems");

                    b.Navigation("PreOrders");

                    b.Navigation("SubStocks");
                });

            modelBuilder.Entity("ddApp.Models.SubStock", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("ddApp.Models.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Outlet")
                        .IsRequired();

                    b.Navigation("Partner")
                        .IsRequired();

                    b.Navigation("SubStocks");
                });
#pragma warning restore 612, 618
        }
    }
}
